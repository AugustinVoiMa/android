eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiMgIHRlc3Q6CiMgICAgaW1hZ2U6IG5leHRjbG91ZGNpL2FuZHJvaWQ6YW5kcm9pZC0xOAojICAgIGNvbW1hbmRzOgojICAgICAgLSBlY2hvIG5vIHwgYW5kcm9pZCBjcmVhdGUgYXZkIC0tZm9yY2UgLW4gdGVzdCAtdCAkQU5EUk9JRF9UQVJHRVQgLS1hYmkgJEFORFJPSURfQUJJIC1jIDIwTQojICAgICAgLSBlbXVsYXRvciAtYXZkIHRlc3QgLW5vLXdpbmRvdyAmCiMgICAgICAtIC4vd2FpdF9mb3JfZW11bGF0b3Iuc2gKIyAgICAgICMgYnVpbGQgYXBwIGFuZCBhc3NlbWJsZSBBUEssIGluIGRlYnVnIG1vZGUKIyAgICAgIC0gLi9ncmFkbGV3IGFzc2VtYmxlR2VuZXJpYwojICAgICAgIyBydW4gYWxsIHRoZSBpbnN0cnVtZW50ZWQgdGVzdHMgb2YgYXBwIG1vZHVsZSAtIERJU0FCTEVEIHVudGlsIHdlIGdldCBhbiBzdGFibGUgc2V0dXAgZm9yIEVzcHJlc3NvIGluIFRyYXZpcwojICAgICAgIyAtIC4vZ3JhZGxldyBjb25uZWN0ZWREZWJ1Z0FuZHJvaWRUZXN0IC0taW5mbwojICAgICAgIyBpbnN0YWxsIGFwcCwgdGhlbiBhc3NlbWJsZSBhbmQgaW5zdGFsbCBpbnN0cnVtZW50ZWQgdGVzdHMgb2YgYXBwIG1vZHVsZQojICAgICAgLSAuL2dyYWRsZXcgOmluc3RhbGxHZW5lcmljRGVidWcKIyAgICAgICMtIC4vZ3JhZGxldyA6aW5zdGFsbE1vZGlmaWVkRGVidWcKIyAgICAgIC0gLi9ncmFkbGV3IDppbnN0YWxsR2VuZXJpY0RlYnVnQW5kcm9pZFRlc3QKIyAgICAgICMtIC4vZ3JhZGxldyA6aW5zdGFsbE1vZGlmaWVkRGVidWdBbmRyb2lkVGVzdAojICAgICAgIyBydW4gc2FtcGxlIGluc3RydW1lbnRlZCB1bml0IHRlc3QKIyAgICAgICMgVE9ETyBmYWlscyBiZWNhdXNlIHRlc3QgcnVubmVyIGlzIG5vdCBhdmFpbGFibGUKIyAgICAgICMtIGFkYiBzaGVsbCBhbSBpbnN0cnVtZW50IC13IC1lIGRlYnVnIGZhbHNlIC1lIGNsYXNzIGNvbS5vd25jbG91ZC5hbmRyb2lkLmRhdGFtb2RlbC5PQ0ZpbGVVbml0VGVzdCBjb20ub3duY2xvdWQuYW5kcm9pZC50ZXN0L2FuZHJvaWQuc3VwcG9ydC50ZXN0LnJ1bm5lci5BbmRyb2lkSlVuaXRSdW5uZXIKIwojICAgIGVudmlyb25tZW50OgojICAgICAgLSBBTkRST0lEX1RBUkdFVD1hbmRyb2lkLTI0CiMgICAgICAtIEFORFJPSURfQUJJPWFybWVhYmktdjdhCiMgICAgICAtIExEX0xJQlJBUllfUEFUSD0vdXNyL2xpYi94ODZfNjQtbGludXgtZ251Lzovb3B0L2FuZHJvaWQtc2RrLWxpbnV4L3Rvb2xzL2xpYjY0L2dsZXNfbWVzYS8KCiAgbGludDoKICAgIGltYWdlOiBuZXh0Y2xvdWRjaS9hbmRyb2lkOmFuZHJvaWQtMTgKICAgIGNvbW1hbmRzOgogICAgICAjIG5lZWRzIGdwbGF5CiAgICAgIC0gc2ggLWMgInNlZCAtaSAnL2NvbS5nb29nbGUuKi5nbXMvcy9eLipcL1wvLy9nJyBidWlsZC5ncmFkbGUiCiAgICAgIC0gcnVieSBzY3JpcHRzL2xpbnQvbGludC11cC5yYiAke0dJVF9VU0VSTkFNRX0gJHtHSVRfVE9LRU59CgpicmFuY2hlczogbWFzdGVy.egeW2H8L0eAXcsNzUc1RZwWNVn1VNShfC0HdbwccDRA